name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Kubernetes  
      uses: azure/setup-kubectl@v1
      with:
        version: '1.24.0'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}

    - name: Verify kubeconfig
      run: |
        kubectl config view
        kubectl cluster-info
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # - name: Build and push Docker images
    #   run: |
    #     services=("account-service" "api-gateway" "centralized-logging" "notification-service" "trading-service" "wallet-service")
    #     for service in "${services[@]}"; do
    #       docker build -t sudeeramadushan/$service:latest ./$service
    #       docker push sudeeramadushan/$service:latest
    #     done

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # - name: Create kubeconfig file
    #   run: |
    #     mkdir -p ~/.kube
    #     echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

    # - name: Update kubeconfig
    #   run: |
    #     aws eks --region us-east-1 update-kubeconfig --name micro-services --role-arn arn:aws:iam::339713093212:role/eks

    # - name: Create Kubeconfig Manually
    #   run: |
    #     mkdir -p ~/.kube
    #     echo "apiVersion: v1
    #     clusters:
    #     - cluster:
    #         server: https://AAD010970832CB3A6ABAB87C18830F3A.gr7.us-east-1.eks.amazonaws.com
    #         certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJTnRmdXdHdFFqbzR3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRBNU1UTXhOekl6TlRsYUZ3MHpOREE1TVRFeE56STROVGxhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURFYTh3OE1zb3VtTTRVUGkzYThoS1U0ei8xdGdaY1pGUVhKYmhOWXkvUGFNYlhoMEZMd2VyOHliNVQKZ3dwb2NBbWN6aEdLalVySlhGOWc5dVNpMDBpbDF5dUg2VVhrVFNtQ3Bhb2h1OXpZSTlkTkNienBFU08zUFBheQo5WFVMNGk0QmtHNDZSNHFXQm1UTTQzVXVnbFBzSkFKaE9saHdtOVIrYnNXZEIxa2ZMQ29OTkNPV1hrUzJzeS8rCmVvQTFmZEtvTURIVnVodTh3ekpPdnROMThnVENRdGZLOVlyaG9EaVVNYW9PQ1ZkMEdNQjZ1czh3ajNsM1MyMngKSkRNd0VTZzVLNEwrMjBsVCtWek4wcWQ5N2xhckVtaDNybkZvajVBSzg1dUhuUkdhdWp4MWt6OFc2M1VUcGxoYgphNlBPQjNoUnNpb2ZVRVdNTHZidm4vYTBHWGRsQWdNQkFBR2pXVEJYTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQCkJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJTbWhFRkVIaDQ0eWUvU1p4Wk1NUklkaU5Qa0NUQVYKQmdOVkhSRUVEakFNZ2dwcmRXSmxjbTVsZEdWek1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmwreG1kSGFBcwo1SGtPcTlvdUxjVDV6NC9VenJWdWEyUTFyRXdoWGMyVHZOcHM5T0JGdDIxbDRJR3dxRVNoTlBBYVoxQU5qN0dUCkFaeFFFb3NQdk5xY3BCMlJRaFpKM2dPV3VhZTdGUi9ucHMvSzZLdFY2b09xaUhPbXNqN0lDZDZFb2VKaTBCMSsKN0EwMzBXUU1kOTI4N3ZpMzZVWDl0K0lQZzkvZ1BiNEhmVjBYSi9jbXhKcmVuMDgyaXoxUnIzTXM2L1B3WC9wSwpEeXlRTWE1cHhQdUhIbXZRcEFZdWw5RzRXbGxOUE1mMTNoWTgxcWwzNTg0L0JEN28xYnJYQm1nT3Nobkx4VnhaClkyOW01cXRPU2g2cm1WeWtRdG55V0FCM0RONE4wSy9zOGZ3MDMwMFV2Z09DN3JQd2JqMmt5RnFZdTJyeDVNSVYKTHZqdHdzb1ZMVi9wCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    #       name: arn:aws:eks:us-east-1:339713093212:cluster/micro-services
    #     contexts:
    #     - context:
    #         cluster: arn:aws:eks:us-east-1:339713093212:cluster/micro-services
    #         user: arn:aws:eks:us-east-1:339713093212:cluster/micro-services
    #         namespace: default
    #       name: arn:aws:eks:us-east-1:339713093212:cluster/micro-services
    #     current-context: arn:aws:eks:us-east-1:339713093212:cluster/micro-services
    #     kind: Config
    #     preferences: {}
    #     users:
    #     - name: arn:aws:eks:us-east-1:339713093212:cluster/micro-services
    #       user:
    #         token: $(aws sts get-caller-identity --query Arn --output text)" > ~/.kube/config

    # - name: Set up KUBECONFIG environment variable
    #   run: echo "KUBECONFIG=~/.kube/config" >> $GITHUB_ENV

    - name: Verify kubeconfig
      run: |
        kubectl config view
        kubectl cluster-info
    # - name: Verify Kubeconfig
    #   run: |
    #     cat ~/.kube/config
    #     kubectl config get-contexts
    #     kubectl config current-context

    # - name: Run unit tests
    #   run: |
    #     services=("account-service" "api-gateway" "centralized-logging" "notification-service" "trading-service" "wallet-service")
    #     for service in "${services[@]}"; do
    #       cd $service
    #       pip install -r requirements.txt
    #       cd ..
    #     done

    # - name: Run integration tests
    #   run: |
    #     ./test_integration.sh

    # - name: Run migrations
    #   run: |
    #     services=("account-service" "api-gateway" "centralized-logging" "notification-service" "trading-service" "wallet-service")
    #     for service in "${services[@]}"; do
    #       cd $service
    #       if [ -f "migrations" ]; then
    #         flask db upgrade # For Flask-Migrate
    #       elif [ -f "scripts/migrate-db.sh" ]; then
    #         ./scripts/migrate-db.sh
    #       fi
    #       cd ..
    #     done

    - name: Deploy to EKS
      run: |
        kubectl apply -f kubernetes/account-service.yaml --validate=false
        kubectl apply -f kubernetes/api-gateway.yaml --validate=false
        kubectl apply -f kubernetes/centralized-logging.yaml --validate=false
        kubectl apply -f kubernetes/notification-service.yaml --validate=false
        kubectl apply -f kubernetes/trading-service.yaml --validate=false
        kubectl apply -f kubernetes/wallet-service.yaml --validate=false

    - name: Wait for rollouts
      run: |
        kubectl rollout status deployment/account-service -n green
        kubectl rollout status deployment/api-gateway -n green
        kubectl rollout status deployment/centralized-logging -n green
        kubectl rollout status deployment/notification-service -n green
        kubectl rollout status deployment/trading-service -n green
        kubectl rollout status deployment/wallet-service -n green

    # - name: Switch Traffic to Green
    #   env:
    #     KUBECONFIG: ${{ secrets.KUBECONFIG }}
    #   run: |
    #     kubectl --kubeconfig=kubeconfig.yaml apply -f kubernetes/services.yaml # Update Service to point to Green
    #     kubectl --kubeconfig=kubeconfig.yaml delete namespace blue # Optional: clean up Blue namespace

    - name: Clean up
      run: |
        rm -f kubeconfig.yaml
