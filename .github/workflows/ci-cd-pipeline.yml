name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and push Docker images
      run: |
        services=("account-service" "api-gateway" "centralized-logging" "notification-service" "trading-service" "wallet-service")
        for service in "${services[@]}"; do
          docker build -t sudeeramadushan/$service:latest ./$service
          docker push sudeeramadushan/$service:latest
        done

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: |
        aws eks --region us-east-1 update-kubeconfig --name micro-services

    - name: Run unit tests
      run: |
        services=("account-service" "api-gateway" "centralized-logging" "notification-service" "trading-service" "wallet-service")
        for service in "${services[@]}"; do
          cd $service
          pip install -r requirements.txt
          pytest
          cd ..
        done

    - name: Run integration tests
      run: |
        ./test_integration.sh

    - name: Run migrations
      run: |
        services=("account-service" "api-gateway" "centralized-logging" "notification-service" "trading-service" "wallet-service")
        for service in "${services[@]}"; do
          cd $service
          if [ -f "migrations" ]; then
            flask db upgrade # For Flask-Migrate
          elif [ -f "scripts/migrate-db.sh" ]; then
            ./scripts/migrate-db.sh
          fi
          cd ..
        done

    - name: Deploy to EKS
      run: |
        kubectl apply -f kubernetes/green/trading-deployment.yaml
        kubectl apply -f kubernetes/green/wallet-deployment.yaml
        kubectl apply -f kubernetes/green/account-management-deployment.yaml
        kubectl apply -f kubernetes/green/api-gateway-deployment.yaml

    - name: Wait for rollouts
      run: |
        kubectl rollout status deployment/trading-service -n green
        kubectl rollout status deployment/wallet-service -n green
        kubectl rollout status deployment/account-service -n green
        kubectl rollout status deployment/api-gateway -n green

    - name: Switch Traffic to Green
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: |
        kubectl --kubeconfig=kubeconfig.yaml apply -f kubernetes/services.yaml # Update Service to point to Green
        kubectl --kubeconfig=kubeconfig.yaml delete namespace blue # Optional: clean up Blue namespace

    - name: Clean up
      run: |
        rm -f kubeconfig.yaml
